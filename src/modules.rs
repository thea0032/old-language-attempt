use crate::dict::keyword::*;
use crate::operations;
use crate::dict::*;
use crate::dict::storage::*;
pub fn math()->Module{
    Module{
        keywords:vec![
            Keyword{
                phrase:String::from("+"),
                priority:11,
                exe:operations::math::add
            },
            Keyword{
                phrase:String::from("++"),
                priority:12,
                exe:operations::math::append,
            },
            Keyword{
                phrase:String::from("\\+"),
                priority:12,
                exe:operations::math::concat,
            },
            Keyword{
                phrase:"-".to_string(),
                priority:11,
                exe:operations::math::sub,
            },
            Keyword{
                phrase:"*".to_string(),
                priority:10,
                exe:operations::math::times,
            },
            Keyword{
                phrase:"/".to_string(),
                priority:10,
                exe:operations::math::div,
            },
            Keyword{
                phrase:"^".to_string(),
                priority:9,
                exe:operations::math::exp,
            },
            Keyword{
                phrase:"%".to_string(),
                priority:10,
                exe:operations::math::modulus,
            }],
    }
}
pub fn actions() ->Module{
    Module{
        keywords:vec![
        Keyword{
            phrase:"=".to_string(),
            priority:1,
            exe:operations::control::assign,
        },
        Keyword{
            phrase:"\\=".to_string(),
            priority:1,
            exe:operations::control::passign,
        },
        Keyword{
            phrase:"if".to_string(),
            priority:3,
            exe:operations::control::parse_if,
        },
        Keyword{
            phrase:"else".to_string(),
            priority:3,
            exe:operations::control::parse_else,
        },
        Keyword{
            phrase:"while".to_string(),
            priority:3,
            exe:operations::control::parse_while,
        },
        Keyword{
            phrase:"return".to_string(),
            priority:8,
            exe:operations::control::return_next,
        },
        Keyword{
            phrase:"let".to_string(),
            priority:2,
            exe:operations::control::let_thing,
        },
        Keyword{
            phrase:"set".to_string(),
            priority:2,
            exe:operations::control::set_thing,
        },
        Keyword{
            phrase:"def".to_string(),
            priority:2,
            exe:operations::control::def_thing,
        },
        Keyword{
            phrase:"fn".to_string(),
            priority:2,
            exe:operations::uth::define_function,
        },
        ],
            }
        }
pub fn modifiers() ->Module{
    Module{
        keywords:vec![
        Keyword{
            phrase:"\\".to_string(),
            priority:0,
            exe:operations::panic,
        },
        Keyword{
            phrase:":".to_string(),
            priority:8,
            exe:operations::math::cvt,
        },
        Keyword{
            phrase:",".to_string(),
            priority:100,
            exe:operations::panic,
        },
        Keyword{
            phrase:"@".to_string(),
            priority:7,
            exe:operations::list::at,
        },
        Keyword{
            phrase:"pub".to_string(),
            priority:100,
            exe:operations::panic,
        },
        Keyword{
            phrase:"void".to_string(),
            priority:100,
            exe:operations::panic,
        },
        Keyword{
            phrase:"inline".to_string(),
            priority:100,
            exe:operations::panic,
        },
        Keyword{
            phrase:"?".to_string(),
            priority:100,
            exe:operations::panic,
        },],
    }
}
pub fn logic() ->Module{
    Module{
        keywords:vec![
        Keyword{
            phrase:"==".to_string(),
            priority:12,
            exe:operations::logic::equals,
        },
        Keyword{
            phrase:"!=".to_string(),
            priority:12,
            exe:operations::logic::neq,
        },
        Keyword{
            phrase:"<=".to_string(),
            priority:12,
            exe:operations::logic::leq,
        },
        Keyword{
            phrase:">=".to_string(),
            priority:12,
            exe:operations::logic::geq,
        },
        Keyword{
            phrase:"||".to_string(),
            priority:14,
            exe:operations::logic::or,
        },
        Keyword{
            phrase:"&&".to_string(),
            priority:14,
            exe:operations::logic::and,
        },
        Keyword{
            phrase:">".to_string(),
            priority:12,
            exe:operations::logic::greater,
        },
        Keyword{
            phrase:"<".to_string(),
            priority:12,
            exe:operations::logic::less,
        },
        Keyword{
            phrase:"!".to_string(),
            priority:13,
            exe:operations::logic::not,
        }],
    }
}
pub fn out() -> Module{
    Module{
        keywords:vec![
            Keyword{
                phrase:"print".to_string(),
                priority:30,
                exe:operations::out::print_this,
            },
            Keyword{
                phrase:"println".to_string(),
                priority:30,
                exe:operations::out::println_this,
            }
        ]
    }
}
/*
pub fn meta() -> Module{
    Module{
        keywords:vec![
            Keyword{
                phrase:"meta".to_string(),
                priority:0,
                exe:operations::meta::make_meta,
            },
            Keyword{
                phrase:"reserve".to_string(),
                priority:0,
                exe:operations::meta::reserve_meta,
            },
            Keyword{
                phrase:"ws".to_string(),
                priority:0,//TODO - 
                exe:operations::meta::ws,
            },
            Keyword{
                phrase:"ws_add".to_string(),
                priority:100,
                exe:operations::panic,
            },
            Keyword{
                phrase:"run".to_string(),
                priority:100,
                exe:operations::panic,
            },
            Keyword{
                phrase:"ins".to_string(),
                priority:100,
                exe:operations::panic,
            },
            Keyword{
                phrase:"left".to_string(),
                priority:100,
                exe:operations::panic,
            },
            Keyword{
                phrase:"right".to_string(),
                priority:100,
                exe:operations::panic,
            },
            Keyword{
                phrase:"all".to_string(),
                priority:100,
                exe:operations::panic,
            },
            Keyword{
                phrase:"one".to_string(),
                priority:100,
                exe:operations::panic,
            },
            Keyword{
                phrase:"to".to_string(),
                priority:100,
                exe:operations::panic,
            },
        ]
    }
}
pub fn generic(phrase:String, priority:usize) -> Keyword{
    Keyword{
        exe:crate::operations::meta::generic,
        phrase:phrase,
        priority:priority,
    }
}*/
pub fn dbg() -> Module{
    Module{
        keywords:vec![
            Keyword{
                phrase:"dump_heap".to_string(),
                priority:0,
                exe:operations::display::display_heap,
            },
            Keyword{
                phrase:"dump_stack".to_string(),
                priority:0,
                exe:operations::display::display_stack,
            },
            Keyword{
                phrase:"dump_vars".to_string(),
                priority:0,
                exe:operations::display::display_vars,
            },
            Keyword{
                phrase:"dump_all".to_string(),
                priority:0,
                exe:operations::display::display_all,
            },
            Keyword{
                phrase:"dl".to_string(),
                priority:0,
                exe:operations::display::display_line,
            }
        ]
    }
}
pub fn list() -> Module{
    Module{
        keywords:vec![
            Keyword{
                phrase:"push".to_string(),
                priority:8,
                exe:operations::list::push,
            },
            Keyword{
                phrase:"pop".to_string(),
                priority:8,
                exe:operations::list::pop,
            },
            Keyword{
                phrase:"add".to_string(),
                priority:8,
                exe:operations::list::add,
            },
            Keyword{
                phrase:"remove".to_string(),
                priority:8,
                exe:operations::list::remove,
            },
            Keyword{
                phrase:"clone".to_string(),
                priority:8,
                exe:operations::list::clone,
            },
            Keyword{
                phrase:"len".to_string(),
                priority:8,
                exe:operations::list::len,
            },
        ]
    }
}
pub fn subdict() -> Module{
    Module{
        keywords:vec![
            Keyword{
                phrase:"template".to_string(),
                priority:2,
                exe:operations::subdict::make_template,
            },
            Keyword{
                phrase:"sub".to_string(),
                priority:2,
                exe:operations::subdict::make_sub,
            },
        ]
    }
}
pub fn file() -> Module{
    Module{
        keywords:vec![
            Keyword{
                phrase:"load".to_string(),
                priority:2,
                exe:operations::file::read,
            },
            Keyword{
                phrase:"::".to_string(),
                priority:5,
                exe:operations::file::field,
            },
        ]
    }
}
use crate::dict::code::*;
impl Object{
    pub fn priority(&self) -> usize{
        match self{
            Object::Variable(_)=>5,
            Object::Parens(_)=>7,
            Object::Literal(val)=>val.priority(),
            Object::Listeral(_)=>7,
        }
    }
}
impl Data{
    pub fn priority(&self) -> usize{
        match self{
            Data::Abstr(_,_) | Data::Func(_)=>6,
            _=>100,
        }
    }
}